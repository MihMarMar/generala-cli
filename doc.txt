The generala game was done based on the description of the game in wikipedia. I am not familiar with the game so some assumptions e.g. the amount of turns were made. 
The game was developed on Linux and used the C++11 way of getting random numbers for the dice with std::random_device, std::mt19937_64 and std::random_distribution classes, however it turned out that it on windows it always provides identical "random" results. Therefore now rand() is used, which also provides identical "random" results, but is at least consistent between linux and windows. 
The main function is used to initialize the game class which contains all the game logic, add players, procceed with each turn and print results after the game ends. Realistically we could put everything inside the game class so that the main() function contains only the game constructor. 


The classes necessary for the game are divided in 2 folders:
 - models: contains objects which are not necessarily game specific. In this case: player.h/cpp and die.h/cpp. Those classes contain no game logic inside them, but just hold data.

- game_logic: This folder also contains 2 classes: scoring.h/cpp game.h/cpp.Scoring holds the functions that are used to calculate the different dice combinations. The number combinations are checked, by counting how many times a certain number occurs in the dice combination. The straight checks if all dice are different, which according to the wikipeadia entry means that there is a straight. The full house is checked by making an array which corresponds to the number of times each number has occured in the dice. After the dice are looped through, the array is sorted and the last 2 indices are checked whether they are equal to 2 and 3 respectively. In this way we can verify that the full house is present/not present. The full house combination can be checked similarily, however in order to be more creative another approach was implemented. We first sort the dice and we check whether 4 consecutive identical dice are present, if so, we return the score. In this way a a generala, can also be counted as a four of a kind, but the wikipedia description does not say whether this is forbidden or not, but a generala always contains at least 4 identical dice, so it makes sense that this should work like that. The generala check just checks if all dice have identical sides as the first one in the array. 
The game class contains everything else that's necessary for the game. It holds the dice, players as long as a map of each category mapped to a boolean which signals whether the category was scratched. 
The game gives the player the choice which category to score from instead of choosing the highest scoring combination instead of the player. In this way there's more player interaction and gives him the chance to make a mistake which is an important aspect of each competitive game. 
oo
The playTurn() method contains a lot of while loops, which wait for certain events, but since this is a CLI game it that only uses user input, we can't miss any important event, as nothing can happen while the game waits for an user input. If this was not the case a more complex implementation can be made which uses callbacks and variables to hold state of the game.

The game was tested with C++17 on Ubuntu 18.04 and on Windows 10 and the game logic was working correctly. The random numbers were the same everytime, but this is a limitation the way the random nubmers are generated.
A generala on the first roll should automatically win the game. This was hard to test by just playing the game, so it was tested by hard cording the rolled dice instead, and verified to be working correctly.
